[{"C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\index.js":"1","C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\reportWebVitals.js":"2","C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\App.js":"3","C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\containers\\Home.js":"4","C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\containers\\Issues.js":"5","C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\containers\\IssueDetails.js":"6","C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\containers\\IssueDetailsPage.js":"7"},{"size":643,"mtime":1609872287114,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":783,"mtime":1609880636074,"results":"11","hashOfConfig":"9"},{"size":1663,"mtime":1609865802788,"results":"12","hashOfConfig":"9"},{"size":2833,"mtime":1609880937145,"results":"13","hashOfConfig":"9"},{"size":770,"mtime":1609879801396,"results":"14","hashOfConfig":"9"},{"size":381,"mtime":1609881009071,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1892id4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\index.js",[],["34","35"],"C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\reportWebVitals.js",[],"C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\App.js",[],"C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\containers\\Home.js",["36"],"import React from 'react'\r\nimport axios from 'axios' //used for sending get,post,put request to backend\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './Home.css';\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    list: {}\r\n  }\r\n\r\n  componentDidMount() //get all the APi's immediatly after rendering\r\n  {\r\n    axios.get(\"https://api.github.com/repositories\").then((res) => {\r\n      console.log(res)\r\n      this.setState({ list: res.data })\r\n    });\r\n  }\r\n  goToDetail(event, newValue) {\r\n    // console.log(event,newValue)\r\n    this.props.history.push({\r\n      pathname: \"/details\",\r\n      state: {\r\n        name: newValue.name,\r\n        ownerName: newValue.owner.login\r\n\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // React fragment : DOM render \r\n      <>\r\n        <div className= \"github-logo\">\r\n          <img className= \"github-image\" alt=\"image-failed-to-load\" src=\"https://www.flaticon.com/svg/static/icons/svg/25/25231.svg\"></img>\r\n        </div>\r\n      \r\n        <div className=\"github-searchbar\">\r\n          <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            options={this.state.list}\r\n            getOptionLabel={(option) => option.name}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => <TextField {...params} label=\"Combo box\" variant=\"outlined\" />}\r\n            onChange={(event, newValue) => {\r\n              this.goToDetail(event, newValue);\r\n            }}\r\n\r\n          />\r\n        </div>\r\n        {/* <button onClick={()=>this.goToDetail()}>onclik</button> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\containers\\Issues.js",["37","38","39","40"],"import React from 'react'\r\nimport axios from 'axios' //used for sending get,post,put request to backend\r\nimport './issues.css';\r\nimport  DatatablePage  from './IssueDetails';\r\nclass Issues extends React.Component {\r\n\r\n  state = {\r\n    list: {},\r\n    issuesList: {},\r\n  }\r\n  goToDetail() {\r\n\r\n  }\r\n\r\n  componentDidMount() //get all the APi's immediatly after rendering\r\n  {\r\n    //console.log(this.props)\r\n    let url = \"https://api.github.com/repos/\" + `${this.props.history.location.state.ownerName}` + '/' + `${this.props.history.location.state.name}`;\r\n    axios.get(url).then((res) => {\r\n      this.setState({ list: res.data })\r\n      let fullName = res.data.full_name;\r\n      let getAllIssues = `https://api.github.com/repos/${fullName}/issues`;\r\n      axios.get(getAllIssues).then((res) => {\r\n        console.log(':::::res new');\r\n        this.setState({ issuesList: res.data });\r\n      })\r\n    });\r\n  }\r\n//this function is a callback func for each row click\r\n  rowClick=(name)=>{\r\n    console.log(\"name is\",name)\r\n    //hit the final api with needed data on next page\r\n    this.props.history.push({\r\n      pathname: \"/issueDetail\",\r\n      state: {\r\n        bugName: name,\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  goToIssueDetails(event, newValue) {\r\n    console.log(event, newValue)\r\n    // this.props.history.push({\r\n    // pathname: \"/issueDetails\",\r\n    // state: {\r\n    //     number:newValue.id,\r\n    //    // ownerName:newValue.owner.login\r\n\r\n    // }\r\n    //})\r\n\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.state.list.name, '::::::STATE')\r\n    const { name, watchers,open_issues, forks_count } = this.state.list;\r\n    return (\r\n      <>\r\n        {/* <button onClick={(event, newValue) => {\r\n    this.goToIssueDetails(event,newValue)}}>getIssue Details</button> */}\r\n        <div className=\"gitrepo-single-detail\">\r\n          <div className=\"gitrepo-name \">\r\n            <h1>{name}</h1>\r\n          </div>\r\n          <div className=\"gitrepo-star\">\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/8/88/Octicons-star.svg\" width=\"20px\" height=\"20px\" />\r\n            <span>{watchers}</span>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"gitrepo-single-detail-count\">\r\n          <div className=\"gitrepo-name \">\r\n            <span><b>{open_issues} Open, </b></span>\r\n            <span>{forks_count} Closed</span>\r\n\r\n          </div>\r\n          {/* <div className=\"gitrepo-star\">\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/8/88/Octicons-star.svg\" width=\"20px\" height=\"20px\" />\r\n            <span>{watchers}</span>\r\n          </div> */}\r\n\r\n        </div>\r\n        <div className=\"gitrepo-single-detail-table\">\r\n          <DatatablePage listofIssue={this.state.issuesList} handleClick={this.rowClick} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Issues;\r\n","C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\containers\\IssueDetails.js",[],"C:\\Users\\Richa\\Desktop\\github-issue-viewer\\github-issue-viewer\\src\\containers\\IssueDetailsPage.js",["41"],"import React from 'react'\r\nimport axios from 'axios' //used for sending get,post,put request to backend\r\n\r\nclass IssueDetailsPage extends React.Component {\r\n  state = {\r\n    list: {}\r\n  }\r\n\r\n \r\n  render() {\r\n    return (\r\n      // React fragment : DOM render \r\n     <div><p>{this.props.history.location.state.bugName}</p></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IssueDetailsPage;\r\n",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":37,"column":11,"nodeType":"48","endLine":37,"endColumn":134},{"ruleId":"49","severity":1,"message":"50","line":18,"column":47,"nodeType":"51","messageId":"52","endLine":18,"endColumn":48},{"ruleId":"49","severity":1,"message":"50","line":18,"column":98,"nodeType":"51","messageId":"52","endLine":18,"endColumn":99},{"ruleId":"49","severity":1,"message":"50","line":18,"column":104,"nodeType":"51","messageId":"52","endLine":18,"endColumn":105},{"ruleId":"53","severity":1,"message":"54","line":67,"column":13,"nodeType":"48","endLine":67,"endColumn":123},{"ruleId":"55","severity":1,"message":"56","line":2,"column":8,"nodeType":"57","messageId":"58","endLine":2,"endColumn":13},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]